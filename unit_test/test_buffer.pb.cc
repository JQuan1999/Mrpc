// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test_buffer.proto

#include "test_buffer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_test_5fbuffer_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_test_5fbuffer_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TestData_Record;
}  // namespace protobuf_test_5fbuffer_2eproto
namespace TestBuffer {
class TestData_RecordDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestData_Record>
      _instance;
} _TestData_Record_default_instance_;
class TestDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestData>
      _instance;
} _TestData_default_instance_;
}  // namespace TestBuffer
namespace protobuf_test_5fbuffer_2eproto {
static void InitDefaultsTestData_Record() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TestBuffer::_TestData_Record_default_instance_;
    new (ptr) ::TestBuffer::TestData_Record();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TestBuffer::TestData_Record::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TestData_Record =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTestData_Record}, {}};

static void InitDefaultsTestData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TestBuffer::_TestData_default_instance_;
    new (ptr) ::TestBuffer::TestData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TestBuffer::TestData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TestData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTestData}, {
      &protobuf_test_5fbuffer_2eproto::scc_info_TestData_Record.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_TestData_Record.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TestData.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TestBuffer::TestData_Record, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TestBuffer::TestData_Record, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TestBuffer::TestData_Record, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TestBuffer::TestData_Record, text_len_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TestBuffer::TestData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TestBuffer::TestData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TestBuffer::TestData, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TestBuffer::TestData, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TestBuffer::TestData, record_),
  2,
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::TestBuffer::TestData_Record)},
  { 9, 17, sizeof(::TestBuffer::TestData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::TestBuffer::_TestData_Record_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::TestBuffer::_TestData_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "test_buffer.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021test_buffer.proto\022\nTestBuffer\"{\n\010TestD"
      "ata\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022+\n\006record\030"
      "\003 \001(\0132\033.TestBuffer.TestData.Record\032(\n\006Re"
      "cord\022\014\n\004text\030\013 \001(\014\022\020\n\010text_len\030\014 \001(\005"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 156);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "test_buffer.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_test_5fbuffer_2eproto
namespace TestBuffer {

// ===================================================================

void TestData_Record::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestData_Record::kTextFieldNumber;
const int TestData_Record::kTextLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestData_Record::TestData_Record()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_test_5fbuffer_2eproto::scc_info_TestData_Record.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:TestBuffer.TestData.Record)
}
TestData_Record::TestData_Record(const TestData_Record& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  text_len_ = from.text_len_;
  // @@protoc_insertion_point(copy_constructor:TestBuffer.TestData.Record)
}

void TestData_Record::SharedCtor() {
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_len_ = 0;
}

TestData_Record::~TestData_Record() {
  // @@protoc_insertion_point(destructor:TestBuffer.TestData.Record)
  SharedDtor();
}

void TestData_Record::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TestData_Record::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TestData_Record::descriptor() {
  ::protobuf_test_5fbuffer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_test_5fbuffer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TestData_Record& TestData_Record::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_test_5fbuffer_2eproto::scc_info_TestData_Record.base);
  return *internal_default_instance();
}


void TestData_Record::Clear() {
// @@protoc_insertion_point(message_clear_start:TestBuffer.TestData.Record)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmptyNoArena();
  }
  text_len_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TestData_Record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TestBuffer.TestData.Record)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes text = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_text()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 text_len = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_text_len();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &text_len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TestBuffer.TestData.Record)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TestBuffer.TestData.Record)
  return false;
#undef DO_
}

void TestData_Record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TestBuffer.TestData.Record)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes text = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->text(), output);
  }

  // optional int32 text_len = 12;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->text_len(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TestBuffer.TestData.Record)
}

::google::protobuf::uint8* TestData_Record::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TestBuffer.TestData.Record)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes text = 11;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->text(), target);
  }

  // optional int32 text_len = 12;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->text_len(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TestBuffer.TestData.Record)
  return target;
}

size_t TestData_Record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TestBuffer.TestData.Record)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes text = 11;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->text());
    }

    // optional int32 text_len = 12;
    if (has_text_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->text_len());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestData_Record::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TestBuffer.TestData.Record)
  GOOGLE_DCHECK_NE(&from, this);
  const TestData_Record* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestData_Record>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TestBuffer.TestData.Record)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TestBuffer.TestData.Record)
    MergeFrom(*source);
  }
}

void TestData_Record::MergeFrom(const TestData_Record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TestBuffer.TestData.Record)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      text_len_ = from.text_len_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TestData_Record::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TestBuffer.TestData.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestData_Record::CopyFrom(const TestData_Record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TestBuffer.TestData.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestData_Record::IsInitialized() const {
  return true;
}

void TestData_Record::Swap(TestData_Record* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestData_Record::InternalSwap(TestData_Record* other) {
  using std::swap;
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(text_len_, other->text_len_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TestData_Record::GetMetadata() const {
  protobuf_test_5fbuffer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_test_5fbuffer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TestData::InitAsDefaultInstance() {
  ::TestBuffer::_TestData_default_instance_._instance.get_mutable()->record_ = const_cast< ::TestBuffer::TestData_Record*>(
      ::TestBuffer::TestData_Record::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestData::kIdFieldNumber;
const int TestData::kNameFieldNumber;
const int TestData::kRecordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestData::TestData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_test_5fbuffer_2eproto::scc_info_TestData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:TestBuffer.TestData)
}
TestData::TestData(const TestData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_record()) {
    record_ = new ::TestBuffer::TestData_Record(*from.record_);
  } else {
    record_ = NULL;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:TestBuffer.TestData)
}

void TestData::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&record_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&record_)) + sizeof(id_));
}

TestData::~TestData() {
  // @@protoc_insertion_point(destructor:TestBuffer.TestData)
  SharedDtor();
}

void TestData::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete record_;
}

void TestData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TestData::descriptor() {
  ::protobuf_test_5fbuffer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_test_5fbuffer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TestData& TestData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_test_5fbuffer_2eproto::scc_info_TestData.base);
  return *internal_default_instance();
}


void TestData::Clear() {
// @@protoc_insertion_point(message_clear_start:TestBuffer.TestData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(record_ != NULL);
      record_->Clear();
    }
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TestData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TestBuffer.TestData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TestBuffer.TestData.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TestBuffer.TestData.Record record = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_record()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TestBuffer.TestData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TestBuffer.TestData)
  return false;
#undef DO_
}

void TestData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TestBuffer.TestData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TestBuffer.TestData.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional .TestBuffer.TestData.Record record = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_record(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TestBuffer.TestData)
}

::google::protobuf::uint8* TestData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TestBuffer.TestData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TestBuffer.TestData.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .TestBuffer.TestData.Record record = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_record(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TestBuffer.TestData)
  return target;
}

size_t TestData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TestBuffer.TestData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .TestBuffer.TestData.Record record = 3;
    if (has_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *record_);
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TestBuffer.TestData)
  GOOGLE_DCHECK_NE(&from, this);
  const TestData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TestBuffer.TestData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TestBuffer.TestData)
    MergeFrom(*source);
  }
}

void TestData::MergeFrom(const TestData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TestBuffer.TestData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_record()->::TestBuffer::TestData_Record::MergeFrom(from.record());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TestData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TestBuffer.TestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestData::CopyFrom(const TestData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TestBuffer.TestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestData::IsInitialized() const {
  return true;
}

void TestData::Swap(TestData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestData::InternalSwap(TestData* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(record_, other->record_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TestData::GetMetadata() const {
  protobuf_test_5fbuffer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_test_5fbuffer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace TestBuffer
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TestBuffer::TestData_Record* Arena::CreateMaybeMessage< ::TestBuffer::TestData_Record >(Arena* arena) {
  return Arena::CreateInternal< ::TestBuffer::TestData_Record >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TestBuffer::TestData* Arena::CreateMaybeMessage< ::TestBuffer::TestData >(Arena* arena) {
  return Arena::CreateInternal< ::TestBuffer::TestData >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
